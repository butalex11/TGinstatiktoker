import logging
import os
import re
import shutil
import glob
import asyncio
import json
import itertools
import traceback
import tempfile
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from telegram.error import NetworkError, TimedOut, RetryAfter
from mp3_downloader import MP3Downloader
from bot_notifications import create_notification_manager

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–£–ë–ò–†–ê–ï–ú –°–ü–ê–ú) ---
logging.getLogger('httpx').setLevel(logging.ERROR)
logging.getLogger('httpcore').setLevel(logging.ERROR)
logging.getLogger('telegram').setLevel(logging.WARNING)

# –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%d.%m.%Y %H:%M:%S",
    level=logging.INFO
)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_IDS_STR = os.getenv("ALLOWED_GROUP_IDS")
ADMIN_GROUP_ID = os.getenv("ADMIN_GROUP_ID")  # –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∞
TEMP_DOWNLOADS_DIR = "/app/bot_temp"
COOKIES_DIR = "/app/cookies"
TELEGRAM_SIZE_LIMIT_BYTES = 49 * 1024 * 1024 # 49 –ú–ë –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
NOTIFICATIONS_ENABLED = os.getenv("BOT_NOTIFICATIONS", "no")

notification_manager = create_notification_manager(GROUP_IDS_STR, NOTIFICATIONS_ENABLED)

if not BOT_TOKEN or not GROUP_IDS_STR:
    logging.critical("ERROR: BOT_TOKEN, ALLOWED_GROUP_IDS environment variables not set!")
    exit()

# ADMIN_GROUP_ID –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
if ADMIN_GROUP_ID:
    try:
        ADMIN_GROUP_ID = int(ADMIN_GROUP_ID)
        logging.info(f"Admin group ID set: {ADMIN_GROUP_ID}")
    except ValueError:
        logging.critical("ERROR: ADMIN_GROUP_ID must be a valid integer!")
        exit()
else:
    logging.info("ADMIN_GROUP_ID not set - error notifications disabled")

try:
    ALLOWED_GROUP_IDS = {int(group_id.strip()) for group_id in GROUP_IDS_STR.split(',')}
except (ValueError, TypeError):
    logging.critical(f"ERROR: Invalid format in ALLOWED_GROUP_IDS.")
    exit()
if not os.path.exists(TEMP_DOWNLOADS_DIR):
    try: os.makedirs(TEMP_DOWNLOADS_DIR)
    except OSError as e: logging.critical(f"Failed to create directory {TEMP_DOWNLOADS_DIR}: {e}"); exit()

logger = logging.getLogger(__name__)
script_dir = os.path.dirname(os.path.abspath(__file__))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MP3 downloader
mp3_downloader = MP3Downloader(TEMP_DOWNLOADS_DIR, TELEGRAM_SIZE_LIMIT_BYTES)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ CookieRotator
_current_bot_context = None
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ STDERR –æ—Ç yt-dlp
_last_ytdlp_stderr = ""

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –û–®–ò–ë–û–ö –ê–î–ú–ò–ù–£ ---
async def send_error_to_admin(context: ContextTypes.DEFAULT_TYPE, error_message: str, error_details: str, platform: str = "Unknown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not ADMIN_GROUP_ID:
        return  # –ï—Å–ª–∏ ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        admin_message = f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n" \
                       f"üìÖ –í—Ä–µ–º—è: {timestamp}\n" \
                       f"üé¨ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n" \
                       f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n" \
                       f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as tmp_file:
            tmp_file.write(f"–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –±–æ—Ç–∞\n")
            tmp_file.write(f"{'='*50}\n")
            tmp_file.write(f"–í—Ä–µ–º—è: {timestamp}\n")
            tmp_file.write(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n")
            tmp_file.write(f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n")
            tmp_file.write(f"{'='*50}\n\n")
            tmp_file.write(f"–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–®–ò–ë–ö–ï:\n")
            tmp_file.write(f"{'-'*50}\n")
            tmp_file.write(error_details)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ STDERR yt-dlp, –µ—Å–ª–∏ –µ—Å—Ç—å
            global _last_ytdlp_stderr
            if _last_ytdlp_stderr.strip():
                tmp_file.write(f"\n\n{'='*50}\n")
                tmp_file.write(f"–ü–û–°–õ–ï–î–ù–ò–ô YT-DLP STDERR:\n")
                tmp_file.write(f"{'-'*50}\n")
                tmp_file.write(_last_ytdlp_stderr)

            tmp_file_path = tmp_file.name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        with open(tmp_file_path, 'rb') as error_file:
            await context.bot.send_document(
                chat_id=ADMIN_GROUP_ID,
                document=error_file,
                caption=admin_message,
                parse_mode="HTML",
                filename=f"error_{platform}_{timestamp.replace(':', '-').replace(' ', '_')}.txt"
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file_path)

        logger.info(f"Error report sent to admin group: {ADMIN_GROUP_ID}")

    except Exception as e:
        logger.error(f"Failed to send error report to admin: {e}")

# --- –ú–ï–ù–ï–î–ñ–ï–† –†–û–¢–ê–¶–ò–ò COOKIE –î–õ–Ø INSTAGRAM ---
class CookieRotator:
    def __init__(self, cookies_dir: str):
        self.cookies_dir = cookies_dir
        self.cookie_files = self._load_cookie_files()
        self.cookie_cycle = itertools.cycle(self.cookie_files) if self.cookie_files else None
        self.current_cookie_file = None

    def _load_cookie_files(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ cookie —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Instagram"""
        if not os.path.exists(self.cookies_dir):
            logger.warning(f"üç™ Cookies directory not found: {self.cookies_dir}")
            return []

        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã cookies*.txt (–¥–ª—è Instagram)
        files = sorted(glob.glob(os.path.join(self.cookies_dir, 'cookies*.txt')))

        if files:
            logger.info(f"üç™ Found {len(files)} instagram cookie files: {[os.path.basename(f) for f in files]}")
        else:
            logger.warning(f"üç™ No instagram cookie files found in {self.cookies_dir}")

        return files

    def get_next_cookie(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É cookie —Ñ–∞–π–ª—É –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏"""
        if not self.cookie_cycle:
            raise Exception("No available cookie files")

        self.current_cookie_file = next(self.cookie_cycle)
        cookie_name = os.path.basename(self.current_cookie_file)
        logger.info(f"üîÑ Switching to instagram cookie: {cookie_name}")

        return self.current_cookie_file

    async def try_with_all_cookies_async(self, process_func, url, temp_folder, *args, **kwargs):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–∂–¥—ã–º cookie –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ + —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)"""
        if not self.cookie_files:
            raise Exception("No available cookie files for attempts")

        attempts_total = len(self.cookie_files)
        last_error = None
        photo_only_detected = False

        for attempt in range(attempts_total):
            try:
                cookie_path = self.get_next_cookie()
                cookie_name = os.path.basename(cookie_path)

                logger.info(f"üç™ Attempt {attempt + 1}/{attempts_total} with instagram cookie: {cookie_name}")
                result = await process_func(cookie_path, url, temp_folder, *args, **kwargs)

                logger.info(f"‚úÖ Successfully processed with instagram cookie: {cookie_name}")
                return result

            except Exception as e:
                last_error = e
                cookie_name = os.path.basename(self.current_cookie_file) if self.current_cookie_file else "unknown"
                error_msg = str(e)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ"
                if error_msg.startswith("PHOTO_ONLY:"):
                    logger.info(f"‚ÑπÔ∏è Instagram cookie {cookie_name}: Detected photo-only post")
                    photo_only_detected = True
                    # –î–ª—è —Ñ–æ—Ç–æ-–ø–æ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ cookie, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    raise e
                else:
                    logger.warning(f"‚ùå Error with instagram cookie {cookie_name}: {str(e)}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                    if _current_bot_context and ADMIN_GROUP_ID:
                        error_details = f"Instagram cookie error for URL: {url}\n"
                        error_details += f"Cookie file: {cookie_name}\n"
                        error_details += f"Attempt: {attempt + 1}/{attempts_total}\n"
                        error_details += f"Cookie path: {cookie_path}\n\n"
                        error_details += f"Exception: {str(e)}\n\n"
                        error_details += f"Traceback:\n{traceback.format_exc()}"

                        try:
                            await send_error_to_admin(
                                _current_bot_context,
                                f"Instagram cookie {cookie_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{attempts_total}",
                                error_details,
                                "Instagram Cookie"
                            )
                        except Exception as admin_error:
                            logger.error(f"Failed to send cookie error to admin: {admin_error}")

                if attempt < attempts_total - 1:
                    logger.info("üîÑ Trying next instagram cookie...")

        raise Exception(f"All instagram cookie files failed. Last error: {last_error}")

# --- –ú–ï–ù–ï–î–ñ–ï–† –†–û–¢–ê–¶–ò–ò COOKIE –î–õ–Ø TIKTOK ---
class TikTokCookieRotator:
    def __init__(self, cookies_dir: str):
        self.cookies_dir = cookies_dir
        self.cookie_files = self._load_cookie_files()
        self.cookie_cycle = itertools.cycle(self.cookie_files) if self.cookie_files else None
        self.current_cookie_file = None

    def _load_cookie_files(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ cookie —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è TikTok"""
        if not os.path.exists(self.cookies_dir):
            logger.warning(f"üç™ Cookies directory not found: {self.cookies_dir}")
            return []

        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã cookie_tiktok*.txt
        files = sorted(glob.glob(os.path.join(self.cookies_dir, 'cookie_tiktok*.txt')))

        if files:
            logger.info(f"üç™ Found {len(files)} tiktok cookie files: {[os.path.basename(f) for f in files]}")
        else:
            logger.warning(f"üç™ No tiktok cookie files found in {self.cookies_dir}")

        return files

    def get_next_cookie(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É TikTok cookie —Ñ–∞–π–ª—É –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏"""
        if not self.cookie_cycle:
            raise Exception("No available TikTok cookie files")

        self.current_cookie_file = next(self.cookie_cycle)
        cookie_name = os.path.basename(self.current_cookie_file)
        logger.info(f"üîÑ Switching to tiktok cookie: {cookie_name}")

        return self.current_cookie_file

    async def try_with_all_cookies_async(self, process_func, url, temp_folder, *args, **kwargs):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–∂–¥—ã–º TikTok cookie –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.cookie_files:
            raise Exception("No available TikTok cookie files for attempts")

        attempts_total = len(self.cookie_files)
        last_error = None

        for attempt in range(attempts_total):
            try:
                cookie_path = self.get_next_cookie()
                cookie_name = os.path.basename(cookie_path)

                logger.info(f"üç™ Attempt {attempt + 1}/{attempts_total} with tiktok cookie: {cookie_name}")
                result = await process_func(cookie_path, url, temp_folder, *args, **kwargs)

                logger.info(f"‚úÖ Successfully processed with tiktok cookie: {cookie_name}")
                return result

            except Exception as e:
                last_error = e
                cookie_name = os.path.basename(self.current_cookie_file) if self.current_cookie_file else "unknown"
                logger.warning(f"‚ùå Error with tiktok cookie {cookie_name}: {str(e)}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                if _current_bot_context and ADMIN_GROUP_ID:
                    error_details = f"TikTok cookie error for URL: {url}\n"
                    error_details += f"Cookie file: {cookie_name}\n"
                    error_details += f"Attempt: {attempt + 1}/{attempts_total}\n"
                    error_details += f"Cookie path: {cookie_path}\n\n"
                    error_details += f"Exception: {str(e)}\n\n"
                    error_details += f"Traceback:\n{traceback.format_exc()}"

                    try:
                        await send_error_to_admin(
                            _current_bot_context,
                            f"TikTok cookie {cookie_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{attempts_total}",
                            error_details,
                            "TikTok Cookie"
                        )
                    except Exception as admin_error:
                        logger.error(f"Failed to send tiktok cookie error to admin: {admin_error}")

                if attempt < attempts_total - 1:
                    logger.info("üîÑ Trying next tiktok cookie...")

        raise Exception(f"All TikTok cookie files failed. Last error: {last_error}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ä–æ—Ç–∞—Ç–æ—Ä–æ–≤
cookie_rotator = CookieRotator(COOKIES_DIR)
tiktok_cookie_rotator = TikTokCookieRotator(COOKIES_DIR)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def find_instagram_url(text: str):
    pattern = r"(https://www\.instagram\.com/(p|reel)/[a-zA-Z0-9_-]+/?)"
    match = re.search(pattern, text)
    return match.group(0) if match else None

def find_tiktok_url(text: str):
    pattern = r"https?://(?:www\.|vm\.)?tiktok\.com/(@[\w\.-]+/video/\d+|[\w-]+)"
    match = re.search(pattern, text)
    return match.group(0) if match else None

def find_youtube_shorts_url(text: str):
    pattern = r"(https?://(?:www\.)?youtube\.com/shorts/[a-zA-Z0-9_-]+)"
    match = re.search(pattern, text)
    return match.group(0) if match else None

def resolve_tiktok_url(url: str):
    if "vm.tiktok.com" in url:
        try: return requests.head(url, allow_redirects=True, timeout=10).url
        except requests.RequestException: return url
    return url

async def run_subprocess(command: list[str], timeout: int = 180, suppress_stdout_log: bool = False) -> tuple[str, str]:
    global _last_ytdlp_stderr

    logger.info(f"üõ† –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")

    process = await asyncio.create_subprocess_exec(
        *command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    try:
        stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=timeout)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º STDERR –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
        stderr_decoded = stderr.decode(errors='ignore')
        _last_ytdlp_stderr = stderr_decoded

        # –õ–æ–≥–∏—Ä—É–µ–º STDOUT —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∞–≤–ª–µ–Ω–æ
        if stdout and not suppress_stdout_log:
            logger.info(f"[yt-dlp STDOUT]\n{stdout.decode(errors='ignore')}")

        # STDERR –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º
        if stderr_decoded:
            logger.warning(f"[yt-dlp STDERR]\n{stderr_decoded}")

        return stdout.decode(), stderr_decoded

    except asyncio.TimeoutError:
        try:
            process.kill()
            raise TimeoutError(f"Command timed out after {timeout} seconds")
        except ProcessLookupError:
            pass
        raise

# --- –õ–û–ì–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –° –†–û–¢–ê–¶–ò–ï–ô COOKIE –î–õ–Ø INSTAGRAM ---
async def process_instagram_with_cookie(cookie_path: str, url: str, temp_folder: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç Instagram –≤–∏–¥–µ–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º cookie —Ñ–∞–π–ª–æ–º"""

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
    logger.info(f"üîç Checking Instagram post content with cookie: {os.path.basename(cookie_path)}")

    check_command = [
        'yt-dlp',
        '--dump-json',
        '--no-warnings',
        '--playlist-items', '1',
        '--cookies', cookie_path,
        '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0',
        url
    ]

    # –ü–æ–¥–∞–≤–ª—è–µ–º STDOUT –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    stdout, stderr = await run_subprocess(check_command, timeout=30, suppress_stdout_log=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ STDERR —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    if "No video formats found!" in stderr:
        logger.info(f"‚ÑπÔ∏è Instagram post contains only images/photos (no video formats found)")
        raise Exception("PHOTO_ONLY:–í —ç—Ç–æ–º –ø–æ—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if not stdout.strip():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ")

    try:
        post_info = json.loads(stdout)
    except json.JSONDecodeError:
        raise Exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ –ø–æ—Å—Ç–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    formats = post_info.get('formats', [])
    has_video_format = False

    for format_info in formats:
        # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å –≤–∏–¥–µ–æ (–Ω–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ)
        if format_info.get('vcodec') and format_info.get('vcodec') != 'none':
            has_video_format = True
            break

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ duration
    duration = post_info.get('duration')

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if not has_video_format and (not duration or duration <= 0):
        logger.info(f"‚ÑπÔ∏è Instagram post contains only images/photos (no video formats in JSON)")
        raise Exception("PHOTO_ONLY:–í —ç—Ç–æ–º –ø–æ—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    logger.info(f"‚úÖ Instagram post contains video content, proceeding with download")

    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –µ—Å—Ç—å, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
    format_selector = "best[height<=720][ext=mp4]/best[ext=mp4]/best[height<=720]/best"

    yt_dlp_download_command = [
        'yt-dlp', url,
        '--playlist-items', '1',
        '-f', format_selector,
        '-o', os.path.join(temp_folder, 'final_video.%(ext)s'),
        '--no-warnings',
        '--cookies', cookie_path,
        '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0'
    ]

    try:
        await run_subprocess(yt_dlp_download_command)
    except Exception:
        # –ü–ª–∞–Ω –ë: fallback –Ω–∞ –ª—é–±–æ–π best
        logger.warning("Failed to download format <= 720p, trying best available...")
        yt_dlp_download_command[4] = "best"
        await run_subprocess(yt_dlp_download_command)

    video_files = glob.glob(os.path.join(temp_folder, '*.mp4'))
    if not video_files:
        raise Exception("Video file not created")

    return video_files[0]

async def download_video_with_yt_dlp_instagram(url: str, temp_folder: str) -> tuple[str | None, str | None]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Instagram –≤–∏–¥–µ–æ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π cookie. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (video_path, error_message)"""
    try:
        logger.info(f"üé¨ Starting Instagram processing: {url}")

        video_path = await cookie_rotator.try_with_all_cookies_async(
            process_instagram_with_cookie,
            url,
            temp_folder
        )

        logger.info(f"‚úÖ Instagram video successfully downloaded: {video_path}")
        return video_path, None

    except Exception as e:
        error_msg = str(e)
        if error_msg.startswith("PHOTO_ONLY:"):
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤ –ø–æ—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            photo_msg = error_msg.replace("PHOTO_ONLY:", "")
            logger.info(f"‚ÑπÔ∏è Instagram post is photo-only: {url}")
            return None, photo_msg
        else:
            logger.error(f"‚ùå Failed to download Instagram video: {e}")
            return None, None

# --- –õ–û–ì–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –° –†–û–¢–ê–¶–ò–ï–ô COOKIE –î–õ–Ø TIKTOK ---
async def process_tiktok_with_cookie(cookie_path: str, url: str, temp_folder: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç TikTok –≤–∏–¥–µ–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º cookie —Ñ–∞–π–ª–æ–º"""
    logger.info(f"üé¨ TikTok: Getting available formats for URL: {url} with cookie: {os.path.basename(cookie_path)}")

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å cookies
    yt_dlp_list_command = [
        'yt-dlp',
        '--dump-json',
        '--cookies', cookie_path,
        '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
        url
    ]

    stdout, stderr = await run_subprocess(yt_dlp_list_command, timeout=60, suppress_stdout_log=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if "This post may not be comfortable for some audiences" in stderr or "Log in for access" in stderr:
        raise Exception("TikTok —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")

    if not stdout.strip():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TikTok –≤–∏–¥–µ–æ")

    video_info = json.loads(stdout)

    logger.info("üé¨ TikTok: Selecting best format under 50 MB...")
    candidate_formats = []
    for f in video_info.get('formats', []):
        if f.get('vcodec') != 'none' and f.get('acodec') != 'none':
            filesize = f.get('filesize') or f.get('filesize_approx')
            if filesize and filesize < TELEGRAM_SIZE_LIMIT_BYTES:
                candidate_formats.append(f)

    if not candidate_formats:
        raise Exception("No suitable video formats found under 50 MB")

    best_format = sorted(candidate_formats, key=lambda x: (x.get('height') or 0, x.get('tbr') or 0), reverse=True)[0]
    chosen_format_str = best_format['format_id']
    logger.info(f"‚úÖ TikTok: Selected best format ({best_format.get('height')}p) with ID: {chosen_format_str}")

    logger.info("‚¨¨ TikTok: Downloading selected format...")
    yt_dlp_download_command = [
        'yt-dlp', url,
        '-f', chosen_format_str,
        '-o', os.path.join(temp_folder, 'final_video.%(ext)s'),
        '--no-warnings',
        '--cookies', cookie_path,
        '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'
    ]

    await run_subprocess(yt_dlp_download_command)

    video_files = glob.glob(os.path.join(temp_folder, 'final_video.*'))
    if video_files:
        logger.info(f"‚úÖ TikTok video successfully downloaded: {video_files[0]}")
        return video_files[0]
    else:
        raise Exception("yt-dlp did not create final file")

async def download_video_with_yt_dlp_tiktok(url: str, temp_folder: str) -> tuple[str | None, str | None]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç TikTok –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (video_path, error_message)"""

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ cookies
    try:
        logger.info(f"üé¨ TikTok: Trying without cookies first for URL: {url}")

        yt_dlp_list_command = ['yt-dlp', '--dump-json', url]
        stdout, stderr = await run_subprocess(yt_dlp_list_command, timeout=60, suppress_stdout_log=True)

        # –ï—Å–ª–∏ –≤ stderr –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ cookies
        if "This post may not be comfortable for some audiences" in stderr or "Log in for access" in stderr:
            logger.info("üç™ TikTok: Authentication required, trying with cookies...")

            if not tiktok_cookie_rotator.cookie_files:
                logger.warning("‚ùå TikTok: No cookie files available for restricted content")
                return None, "–≠—Ç–æ—Ç TikTok –ø–æ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ TikTok cookies –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º —Ä–æ—Ç–∞—Ü–∏–∏ TikTok cookies
            try:
                video_path = await tiktok_cookie_rotator.try_with_all_cookies_async(
                    process_tiktok_with_cookie,
                    url,
                    temp_folder
                )
                return video_path, None
            except Exception as cookie_error:
                # –¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, None —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω—É
                logger.error(f"‚ùå All TikTok cookies failed: {cookie_error}")
                return None, None

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ cookies
        video_info = json.loads(stdout)

        logger.info("üé¨ TikTok: Selecting best format under 50 MB...")
        candidate_formats = []
        for f in video_info.get('formats', []):
            if f.get('vcodec') != 'none' and f.get('acodec') != 'none':
                filesize = f.get('filesize') or f.get('filesize_approx')
                if filesize and filesize < TELEGRAM_SIZE_LIMIT_BYTES:
                    candidate_formats.append(f)

        if not candidate_formats:
            # –≠—Ç–æ –æ—à–∏–±–∫–∞ –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ cookies - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            return None, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ –ø–æ–¥ 50 –ú–ë"

        best_format = sorted(candidate_formats, key=lambda x: (x.get('height') or 0, x.get('tbr') or 0), reverse=True)[0]
        chosen_format_str = best_format['format_id']
        logger.info(f"‚úÖ TikTok: Selected best format ({best_format.get('height')}p) with ID: {chosen_format_str}")

        logger.info("‚¨¨ TikTok: Downloading selected format...")
        yt_dlp_download_command = [
            'yt-dlp', url, '-f', chosen_format_str,
            '-o', os.path.join(temp_folder, 'final_video.%(ext)s'), '--no-warnings'
        ]
        await run_subprocess(yt_dlp_download_command)

        video_files = glob.glob(os.path.join(temp_folder, 'final_video.*'))
        if video_files:
            logger.info(f"‚úÖ TikTok video successfully downloaded: {video_files[0]}")
            return video_files[0], None
        else:
            # –≠—Ç–æ –æ—à–∏–±–∫–∞ –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ cookies - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª"

    except Exception as e:
        # –≠—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –±–µ–∑ cookies - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        error_msg = str(e)
        logger.error(f"‚ùå Failed to download TikTok video without cookies: {e}")
        return None, f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {error_msg}"

async def download_video_with_yt_dlp_youtube_shorts(url: str, temp_folder: str) -> str | None:
    logger.info("üé¨ YouTube Shorts: Looking for the best available file (not higher than 720p)...")
    format_selector = "best[height<=720][ext=mp4]/best[ext=mp4]/best[height<=720]/best"

    # Base yt-dlp command with extra reliability flags
    base_command = [
        'yt-dlp', '--rm-cache-dir', '--force-ipv4',
        '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0',
        '--add-header', 'Referer: https://www.youtube.com/',
        '--http-chunk-size', '10M',
        url,
        '--playlist-items', '1',
        '-f', format_selector,
        '-o', os.path.join(temp_folder, 'final_video.%(ext)s'),
        '--no-warnings'
    ]

    # Up to 3 retry attempts
    for attempt in range(1, 4):
        logger.info(f"‚ñ∂Ô∏è YouTube Shorts: Attempt {attempt}/3")

        try:
            stdout, stderr = await run_subprocess(base_command)

            # Check for 403 error in stderr
            if "HTTP Error 403" in stderr:
                logger.warning("‚ö†Ô∏è HTTP 403 Forbidden detected. Retrying...")
                continue

            # Check if MP4 file exists
            video_files = glob.glob(os.path.join(temp_folder, '*.mp4'))
            if video_files:
                logger.info(f"‚úÖ YouTube Shorts video successfully downloaded: {video_files[0]}")
                return video_files[0]
            else:
                logger.warning(f"‚ö†Ô∏è Downloaded file is not MP4 or was not found. Files: {video_files}")

        except Exception as e:
            logger.error(f"‚ùå yt-dlp failed on attempt {attempt}. Error: {str(e)}")

    logger.error("‚ùå All YouTube Shorts download attempts have failed.")
    return None

async def get_video_metadata(video_path: str) -> tuple[int | None, int | None, int | None]:
    try:
        logger.info("üìã Getting metadata from video file for 'smart' sending...")
        ffprobe_command = [
            'ffprobe', '-v', 'error', '-select_streams', 'v:0',
            '-show_entries', 'stream=width,height,duration', '-of', 'json', video_path
        ]
        stdout, stderr = await run_subprocess(ffprobe_command, timeout=60)
        video_info = json.loads(stdout)['streams'][0]
        width = int(video_info.get('width', 0))
        height = int(video_info.get('height', 0))
        duration = int(float(video_info.get('duration', 0)))
        logger.info(f"‚úÖ Metadata obtained: {width}x{height}, {duration} sec.")
        return width, height, duration
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Failed to get metadata from video file: {e}. Sending as usual.")
        return None, None, None

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id in ALLOWED_GROUP_IDS:
        await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.mention_html()}!")

async def downloadmp3_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /downloadmp3"""
    if update.effective_chat.id in ALLOWED_GROUP_IDS:
        try:
            await mp3_downloader.process_mp3_download(update, context)
        except Exception as e:
            logger.error(f"‚ùå Error processing MP3 download: {e}", exc_info=True)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
            user = update.effective_user
            error_details = f"MP3 download error\n"
            error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
            error_details += f"Chat ID: {update.effective_chat.id}\n"
            error_details += f"Message ID: {update.message.message_id}\n"
            error_details += f"Command args: {context.args if context.args else 'No args'}\n\n"
            error_details += f"Exception: {str(e)}\n\n"
            error_details += f"Traceback:\n{traceback.format_exc()}"

            await send_error_to_admin(
                context,
                f"MP3 Download: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}",
                error_details,
                "MP3 Download"
            )

async def process_instagram_link(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    global _current_bot_context
    _current_bot_context = context

    chat_id, msg_id, user = update.effective_chat.id, update.message.message_id, update.effective_user

    status_msg = await context.bot.send_message(
        chat_id=chat_id,
        text="–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Instagram –ø–æ—Å—Ç–∞... üîç",
        reply_to_message_id=msg_id
    )

    temp_folder = os.path.join(TEMP_DOWNLOADS_DIR, f"insta_{chat_id}_{msg_id}")
    os.makedirs(temp_folder, exist_ok=True)
    success = False

    try:
        await status_msg.edit_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Instagram –ø–æ—Å—Ç... ‚è≥")

        video_path, photo_message = await download_video_with_yt_dlp_instagram(url, temp_folder)

        if photo_message:
            # –≠—Ç–æ –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            await status_msg.edit_text(f"‚ÑπÔ∏è {photo_message}")
            logger.info(f"‚ÑπÔ∏è Instagram post contains no video: {url}")
            return

        if video_path:
            caption = f"Instagram <a href=\"{url}\">–≤–∏–¥–µ–æ</a> –æ—Ç–ø—Ä–∞–≤–∏–ª {user.mention_html()}"
            width, height, duration = await get_video_metadata(video_path)

            with open(video_path, 'rb') as vf:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=vf,
                    caption=caption,
                    parse_mode="HTML",
                    width=width,
                    height=height,
                    duration=duration,
                    supports_streaming=True
                )
            await context.bot.delete_message(chat_id, msg_id)
            success = True
        else:
            await status_msg.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ. üòî\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, 18+ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            error_details = f"Instagram download failed for URL: {url}\n"
            error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
            error_details += f"Chat ID: {chat_id}\n"
            error_details += f"Message ID: {msg_id}\n"
            error_details += "All cookie files failed to download the video."

            await send_error_to_admin(
                context,
                "Instagram: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ cookie",
                error_details,
                "Instagram"
            )
    except Exception as e:
        logger.error(f"‚ùå Error processing Instagram: {e}", exc_info=True)
        await status_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
        error_details = f"Instagram processing error for URL: {url}\n"
        error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
        error_details += f"Chat ID: {chat_id}\n"
        error_details += f"Message ID: {msg_id}\n\n"
        error_details += f"Exception: {str(e)}\n\n"
        error_details += f"Traceback:\n{traceback.format_exc()}"

        await send_error_to_admin(
            context,
            f"Instagram: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}",
            error_details,
            "Instagram"
        )
    finally:
        _current_bot_context = None
        if success:
            try: await status_msg.delete()
            except Exception: pass
        if os.path.exists(temp_folder):
            shutil.rmtree(temp_folder)

async def process_tiktok_link(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    global _current_bot_context
    _current_bot_context = context

    chat_id, msg_id, user = update.effective_chat.id, update.message.message_id, update.effective_user

    status_msg = await context.bot.send_message(
        chat_id=chat_id,
        text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é TikTok –≤–∏–¥–µ–æ... ‚è≥",
        reply_to_message_id=msg_id
    )

    temp_folder = os.path.join(TEMP_DOWNLOADS_DIR, f"tiktok_{chat_id}_{msg_id}")
    os.makedirs(temp_folder, exist_ok=True)
    success = False

    try:
        resolved_url = resolve_tiktok_url(url)
        video_path, error_message = await download_video_with_yt_dlp_tiktok(resolved_url, temp_folder)

        if error_message:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
            await status_msg.edit_text(f"‚ÑπÔ∏è {error_message}")
            logger.info(f"‚ÑπÔ∏è TikTok specific error: {error_message}")
            return

        if video_path:
            caption = f"TikTok <a href=\"{url}\">–≤–∏–¥–µ–æ</a> –æ—Ç–ø—Ä–∞–≤–∏–ª {user.mention_html()}"
            width, height, duration = await get_video_metadata(video_path)

            with open(video_path, 'rb') as vf:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=vf,
                    caption=caption,
                    parse_mode="HTML",
                    width=width,
                    height=height,
                    duration=duration,
                    supports_streaming=True
                )
            await context.bot.delete_message(chat_id, msg_id)
            success = True
        else:
            await status_msg.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ. üòî\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
            error_details = f"TikTok download failed for URL: {url}\n"
            error_details += f"Resolved URL: {resolved_url}\n"
            error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
            error_details += f"Chat ID: {chat_id}\n"
            error_details += f"Message ID: {msg_id}\n"
            error_details += "Video download returned None - possibly too large or unavailable."

            await send_error_to_admin(
                context,
                "TikTok: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                error_details,
                "TikTok"
            )
    except Exception as e:
        logger.error(f"‚ùå Error processing TikTok: {e}", exc_info=True)
        await status_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
        error_details = f"TikTok processing error for URL: {url}\n"
        error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
        error_details += f"Chat ID: {chat_id}\n"
        error_details += f"Message ID: {msg_id}\n\n"
        error_details += f"Exception: {str(e)}\n\n"
        error_details += f"Traceback:\n{traceback.format_exc()}"

        await send_error_to_admin(
            context,
            f"TikTok: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}",
            error_details,
            "TikTok"
        )
    finally:
        _current_bot_context = None
        if success:
            try: await status_msg.delete()
            except Exception: pass
        if os.path.exists(temp_folder):
            shutil.rmtree(temp_folder)

async def process_youtube_shorts_link(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    chat_id, msg_id, user = update.effective_chat.id, update.message.message_id, update.effective_user
    status_msg = await context.bot.send_message(
        chat_id=chat_id,
        text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é YouTube Shorts –≤–∏–¥–µ–æ... ‚è≥",
        reply_to_message_id=msg_id
    )
    temp_folder = os.path.join(TEMP_DOWNLOADS_DIR, f"youtube_{chat_id}_{msg_id}")
    os.makedirs(temp_folder, exist_ok=True)
    success = False
    try:
        video_path = await download_video_with_yt_dlp_youtube_shorts(url, temp_folder)
        if video_path:
            caption = f"YouTube Shorts <a href=\"{url}\">–≤–∏–¥–µ–æ</a> –æ—Ç–ø—Ä–∞–≤–∏–ª {user.mention_html()}"
            width, height, duration = await get_video_metadata(video_path)

            with open(video_path, 'rb') as vf:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=vf,
                    caption=caption,
                    parse_mode="HTML",
                    width=width,
                    height=height,
                    duration=duration,
                    supports_streaming=True
                )
            await context.bot.delete_message(chat_id, msg_id)
            success = True
        else:
            await status_msg.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ. üòî\n–í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
            error_details = f"YouTube Shorts download failed for URL: {url}\n"
            error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
            error_details += f"Chat ID: {chat_id}\n"
            error_details += f"Message ID: {msg_id}\n"
            error_details += "All 3 download attempts failed."

            await send_error_to_admin(
                context,
                "YouTube Shorts: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫",
                error_details,
                "YouTube Shorts"
            )
    except Exception as e:
        logger.error(f"‚ùå Error processing YouTube Shorts: {e}", exc_info=True)
        await status_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
        error_details = f"YouTube Shorts processing error for URL: {url}\n"
        error_details += f"User: {user.username or user.first_name} (ID: {user.id})\n"
        error_details += f"Chat ID: {chat_id}\n"
        error_details += f"Message ID: {msg_id}\n\n"
        error_details += f"Exception: {str(e)}\n\n"
        error_details += f"Traceback:\n{traceback.format_exc()}"

        await send_error_to_admin(
            context,
            f"YouTube Shorts: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}",
            error_details,
            "YouTube Shorts"
        )
    finally:
        if success:
            try: await status_msg.delete()
            except Exception: pass
        if os.path.exists(temp_folder):
            shutil.rmtree(temp_folder)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (update.message and update.message.text and update.effective_chat.id in ALLOWED_GROUP_IDS): return
    text = update.message.text
    if insta_url := find_instagram_url(text):
        await process_instagram_link(update, context, insta_url)
    elif tiktok_url := find_tiktok_url(text):
        await process_tiktok_link(update, context, tiktok_url)
    elif youtube_shorts_url := find_youtube_shorts_url(text):
        await process_youtube_shorts_link(update, context, youtube_shorts_url)

async def setup_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
    commands = [
        ("downloadmp3", "–°–∫–∞—á–∞—Ç—å MP3 –∏–∑ –≤–∏–¥–µ–æ YouTube (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /downloadmp3 —Å—Å—ã–ª–∫–∞)")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("‚úÖ Bot commands configured successfully")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram Bot API"""
    error = context.error

    if isinstance(error, NetworkError):
        logger.warning("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram API")
    elif isinstance(error, TimedOut):
        logger.warning("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API")
    elif isinstance(error, RetryAfter):
        logger.warning(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {error.retry_after} —Å–µ–∫")
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram Bot API: {type(error).__name__}: {str(error)}")


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    notification_manager.set_application(application)
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("downloadmp3", downloadmp3_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("üöÄ Bot successfully started!")

    async def post_init(application):
        await setup_commands(application)
        await notification_manager.send_startup_notification()
    application.post_init = post_init
    application.run_polling()

if __name__ == "__main__":
    main()
