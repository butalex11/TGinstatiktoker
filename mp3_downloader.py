import logging
import os
import glob
import asyncio
import json
import re
from telegram import Update
from telegram.ext import ContextTypes
import shutil

logger = logging.getLogger(__name__)

class MP3Downloader:
    def __init__(self, temp_downloads_dir: str, telegram_size_limit: int):
        self.temp_downloads_dir = temp_downloads_dir
        self.telegram_size_limit = telegram_size_limit

    def extract_url_from_command(self, text: str) -> str | None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã /downloadmp3"""
        # –ò—â–µ–º URL –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏–ª–∏ –±–µ–∑ –Ω–∏—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        patterns = [
            r'/downloadmp3\s+"([^"]+)"',  # URL –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r"/downloadmp3\s+'([^']+)'",  # URL –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'/downloadmp3\s+(\S+)',      # URL –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        ]

        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1)
        return None

    def is_supported_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3"""
        supported_patterns = [
            r'youtube\.com/watch\?v=',
            r'youtube\.com/shorts/',
            r'youtu\.be/',
        ]

        return any(re.search(pattern, url) for pattern in supported_patterns)

    async def run_subprocess(self, command: list[str], timeout: int = 180) -> tuple[str, str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–µ"""
        logger.info(f"üõ† Running MP3 command: {' '.join(command)}")

        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        try:
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=timeout)

            if stdout:
                logger.info(f"[yt-dlp MP3 STDOUT]\n{stdout.decode(errors='ignore')}")
            if stderr:
                logger.warning(f"[yt-dlp MP3 STDERR]\n{stderr.decode(errors='ignore')}")

            return stdout.decode(), stderr.decode()

        except asyncio.TimeoutError:
            try:
                process.kill()
                raise TimeoutError(f"MP3 command timed out after {timeout} seconds")
            except ProcessLookupError:
                pass
            raise

    async def get_audio_info(self, url: str) -> dict | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            command = ['yt-dlp', '--dump-json', '--no-warnings', url]
            stdout, stderr = await self.run_subprocess(command, timeout=60)

            if not stdout.strip():
                return None

            info = json.loads(stdout)
            return info

        except Exception as e:
            logger.error(f"‚ùå Failed to get audio info: {e}")
            return None

    async def download_mp3(self, url: str, temp_folder: str) -> str | None:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç MP3 –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
        try:
            logger.info(f"üéµ Starting MP3 download: {url}")

            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3
            # yt-dlp —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–µ–µ –∞—É–¥–∏–æ –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ MP3
            command = [
                'yt-dlp',
                url,
                '--extract-audio',              # –ò–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
                '--audio-format', 'mp3',        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3
                '--audio-quality', '0',         # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (0 = –ª—É—á—à–µ–µ)
                '--embed-metadata',             # –í—Å—Ç—Ä–æ–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                '--add-metadata',               # –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                '-o', os.path.join(temp_folder, '%(title)s.%(ext)s'),
                '--no-warnings',
                '--playlist-items', '1',        # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç
            ]

            # –î–ª—è YouTube –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if 'youtube.com' in url or 'youtu.be' in url:
                command.extend([
                    '--add-header', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
                    '--add-header', 'Referer: https://www.youtube.com/',
                ])

            await self.run_subprocess(command)

            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª
            mp3_files = glob.glob(os.path.join(temp_folder, '*.mp3'))

            if not mp3_files:
                raise Exception("MP3 file was not created")

            mp3_path = mp3_files[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(mp3_path)
            if file_size > self.telegram_size_limit:
                logger.warning(f"‚ö†Ô∏è MP3 file too large: {file_size / (1024*1024):.1f} MB")
                return None

            logger.info(f"‚úÖ MP3 successfully downloaded: {mp3_path} ({file_size / (1024*1024):.1f} MB)")
            return mp3_path

        except Exception as e:
            logger.error(f"‚ùå MP3 download failed: {e}")
            return None

    async def get_audio_metadata(self, audio_path: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        try:
            command = [
                'ffprobe', '-v', 'error',
                '-show_entries', 'format=duration,size:stream=codec_name',
                '-of', 'json', audio_path
            ]

            stdout, stderr = await self.run_subprocess(command, timeout=30)
            info = json.loads(stdout)

            duration = float(info.get('format', {}).get('duration', 0))
            size = int(info.get('format', {}).get('size', 0))

            return {
                'duration': int(duration),
                'size_mb': round(size / (1024*1024), 1)
            }

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to get audio metadata: {e}")
            return {'duration': None, 'size_mb': None}

    async def process_mp3_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /downloadmp3"""
        if not update.message or not update.message.text:
            return

        chat_id = update.effective_chat.id
        msg_id = update.message.message_id
        user = update.effective_user
        text = update.message.text

        logger.info(f"üì• MP3 download request from user {user.id} ({user.username or user.first_name}) in chat {chat_id}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        url = self.extract_url_from_command(text)
        if not url:
            logger.warning(f"‚ùå Invalid command format from user {user.id}: {text}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/downloadmp3 \"—Å—Å—ã–ª–∫–∞\"`\n"
                "–∏–ª–∏\n"
                "`/downloadmp3 —Å—Å—ã–ª–∫–∞`",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å URL
        if not self.is_supported_url(url):
            logger.warning(f"‚ùå Unsupported URL from user {user.id}: {url}")
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                "‚Ä¢ YouTube (–æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ –∏ Shorts)\n"
            )
            return

        logger.info(f"üéØ Processing MP3 download for URL: {url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üéµ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ MP3...\nüîó {url}",
            reply_to_message_id=msg_id
        )

        temp_folder = os.path.join(self.temp_downloads_dir, f"mp3_{chat_id}_{msg_id}")
        os.makedirs(temp_folder, exist_ok=True)
        success = False

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await status_msg.edit_text(f"üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ...\nüîó {url}")

            # –°–∫–∞—á–∏–≤–∞–µ–º MP3
            mp3_path = await self.download_mp3(url, temp_folder)

            if not mp3_path:
                logger.error(f"‚ùå MP3 download failed for URL: {url}")
                await status_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ.\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>49MB)\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = await self.get_audio_metadata(mp3_path)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            file_name = os.path.basename(mp3_path)
            caption = f"üéµ MP3 –æ—Ç {user.mention_html()}\nüîó <a href=\"{url}\">–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ</a>"

            if metadata['duration']:
                caption += f"\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {metadata['duration']//60}:{metadata['duration']%60:02d}"
            if metadata['size_mb']:
                caption += f"\nüìÅ –†–∞–∑–º–µ—Ä: {metadata['size_mb']} MB"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é MP3 —Ñ–∞–π–ª...")

            logger.info(f"üì§ Sending MP3 file: {file_name} ({metadata['size_mb']} MB)")

            with open(mp3_path, 'rb') as audio_file:
                await context.bot.send_audio(
                    chat_id=chat_id,
                    audio=audio_file,
                    caption=caption,
                    parse_mode="HTML",
                    duration=metadata['duration'],
                    title=file_name.replace('.mp3', '')
                )

            success = True
            await context.bot.delete_message(chat_id, msg_id)
            logger.info(f"‚úÖ MP3 successfully sent to user {user.id} in chat {chat_id}")

        except Exception as e:
            logger.error(f"‚ùå Error processing MP3 request from user {user.id}: {e}", exc_info=True)
            await status_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )

        finally:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if success:
                try:
                    await status_msg.delete()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to delete status message: {e}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            if os.path.exists(temp_folder):
                shutil.rmtree(temp_folder)
                logger.info(f"üßπ Cleaned up temp folder: {temp_folder}")
